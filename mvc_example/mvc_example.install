<?php

/**
 * @file
 * Добавление/удаление контента при установке/удалении модуля.
 */

/**
 * Implements hook_install().
 * Создание типа материала products и словаря shop_taste
 *
 * @return void
 */
function mvc_example_install() {
  if (!in_array('products', node_type_get_names())) {
    $type = array(
      'type' => 'products',
      'name' => st('Products'),
      'base' => 'node_content',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
      'title_label' => 'Товары'
    );

    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  # Создание словаря таксономии Вкусы
  if(!in_array('shop_taste', taxonomy_get_vocabularies())) {
    $vocabulary = new stdClass();
    $vocabulary->name = 'Вкусы';
    $vocabulary->machine_name = "shop_taste";
    $vocabulary->module = 'taxonomy';
    taxonomy_vocabulary_save($vocabulary);
  }

  # Создание словаря таксономии Бренды
  if(!in_array('shop_brands', taxonomy_get_vocabularies())) {
    $vocabulary = new stdClass();
    $vocabulary->name = 'Бренды';
    $vocabulary->machine_name = "shop_brands";
    $vocabulary->module = 'taxonomy';
    taxonomy_vocabulary_save($vocabulary);
  }
}

/**
 * Implements hook_uninstall().
 * Удаление bundle и его контента при удалении модуля
 *
 * @return void
 * @throws Exception
 */
function mvc_example_uninstall() {
  // Node delete
  $query = db_select('node', 'n')
    ->fields('n', array('nid'))
    ->condition('n.type', 'products');
  $nids = $query->execute()->fetchCol();

  if (!empty($nids)) {
    node_delete_multiple($nids);
  }

  node_type_delete('products');
  drupal_flush_all_caches();
  drupal_set_message('The content type "Products" has been deleted.');

  # Удаление словаря Вкусы
  $vocabulary = taxonomy_vocabulary_machine_name_load('shop_taste');
  taxonomy_vocabulary_delete($vocabulary->vid);

  # Удаление словаря Бренды
  $vocabulary = taxonomy_vocabulary_machine_name_load('shop_brands');
  taxonomy_vocabulary_delete($vocabulary->vid);
}

/**
 * Implements hook_enable().
 * Создание полей при включении модуля
 *
 * @return void
 * @throws FieldException
 */
function mvc_example_enable() {
  $fields = [
    [
      'field_name' => 'product_price',
      'type' => 'number_decimal',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Стоимость'
    ],
    [
      'field_name' => 'product_fat_content',
      'type' => 'number_decimal',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Жирность, %'
    ],
    [
      'field_name' => 'product_weight',
      'type' => 'number_integer',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Вес, г'
    ],
    [
      'field_name' => 'product_proteins',
      'type' => 'number_integer',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Белки в 100 г'
    ],
    [
      'field_name' => 'product_carbohydrates',
      'type' => 'number_integer',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Углеводы в 100 г'
    ],
    [
      'field_name' => 'product_fats',
      'type' => 'number_integer',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Жиры в 100 г'
    ],
    [
      'field_name' => 'product_image',
      'type' => 'image',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Фото'
    ],
    [
      'field_name' => 'product_taste',
      'type' => 'taxonomy_term_reference',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Вкус',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'shop_taste',
            'parent' => 0
          )
        )
      )
    ],
    [
      'field_name' => 'product_brand',
      'type' => 'taxonomy_term_reference',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Бренд',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'shop_brands',
            'parent' => 0
          )
        )
      )
    ],
    [
      'field_name' => 'product_expiration_date',
      'type' => 'text',
      'entity' => 'node',
      'bundle' => 'products',
      'label' => 'Срок годности'
    ],
  ];

  foreach ($fields as $field) {
    field_create_field($field);

    // Подключаем поле к нашему типу.
    $instance = array(
      'field_name' => $field['field_name'],
      'entity_type' => $field['entity'],
      'bundle' => $field['bundle'],
      'label' => $field['label'],
    );

    field_create_instance($instance);
  }
}

/**
 * Implements hook_disable()
 * Удаление полей при отключении модуля
 *
 * @return void
 */
function mvc_example_disable() {
  $fields = [
    [
      'field_name' => 'product_price',
      'entity_type' => 'node',
      'bundle' => 'products',
    ],
    [
      'field_name' => 'product_fat_content',
      'entity_type' => 'node',
      'bundle' => 'products',
    ],
    [
      'field_name' => 'product_proteins',
      'entity_type' => 'node',
      'bundle' => 'products',
    ],
    [
      'field_name' => 'product_carbohydrates',
      'entity_type' => 'node',
      'bundle' => 'products',
    ],
    [
      'field_name' => 'product_fats',
      'entity_type' => 'node',
      'bundle' => 'products',
    ],
    [
      'field_name' => 'product_image',
      'entity_type' => 'node',
      'bundle' => 'products',
    ],
    [
      'field_name' => 'product_taste',
      'entity_type' => 'node',
      'bundle' => 'products',
    ],
    [
      'field_name' => 'product_brand',
      'entity_type' => 'node',
      'bundle' => 'products',
    ],
    [
      'field_name' => 'product_expiration_date',
      'entity_type' => 'node',
      'bundle' => 'products',
    ]
  ];

  foreach ($fields as $instance) {
    field_delete_instance($instance);
    field_delete_field($instance['field_name']);
  }
}


